const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const { authenticateToken } = require('../middleware/auth');
const Visitor = require('../models/Visitor');
const User = require('../models/User');
const { v4: uuidv4 } = require('uuid');

// Multer storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname)); // Append extension
  }
});

const upload = multer({ storage: storage });

// @route   POST api/visitors/group
// @desc    Create a new group of visitors with a single QR code
// @access  Private
router.post('/group', authenticateToken, upload.any(), async (req, res) => {
  const { visitors: visitorsJSON, reason, validUntil } = req.body;
  const { userId } = req.user;

  if (!visitorsJSON || !validUntil) {
    return res.status(400).json({ message: 'Veuillez fournir les informations des visiteurs et la date de validité.' });
  }

  try {
    const visitors = JSON.parse(visitorsJSON);
    if (!Array.isArray(visitors) || visitors.length === 0) {
      return res.status(400).json({ message: 'Le format des visiteurs est invalide.' });
    }

    const user = await User.findById(userId);
    if (!user || !user.buildingId) {
      return res.status(404).json({ message: 'Utilisateur ou bâtiment non trouvé.' });
    }

    const groupId = uuidv4(); // A single ID for the whole group

    const visitorDocs = visitors.map((visitor, index) => {
      let photoUrl = null;
      const file = req.files.find(f => f.fieldname === `photo_${index}`);
      if (file) {
        photoUrl = `uploads/${file.filename}`;
      }

      return {
        name: visitor.name,
        phone: visitor.phone,
        photoUrl,
        reason, // Common reason
        validUntil, // Common validity
        createdBy: userId,
        buildingId: user.buildingId,
        groupId,
        // accessId will be generated automatically by the model's default
      };
    });

    const createdVisitors = await Visitor.insertMany(visitorDocs);

    // We'll use the groupId as the value for the QR Code
    // The frontend will then know it's a group QR code
    const groupQrValue = `group:${groupId}`;

    res.status(201).json({
      message: 'Groupe de visiteurs créé avec succès.',
      visitor: { 
        accessId: groupQrValue, // Send a special value for the group QR code
        validUntil: validUntil,
      }
    });

  } catch (error) {
    console.error("Erreur lors de la création du groupe de visiteurs:", error);
    res.status(500).json({ message: 'Erreur du serveur.' });
  }
});


// @route   POST api/visitors
// @desc    Create a new visitor
// @access  Private
router.post('/', authenticateToken, upload.single('photo'), async (req, res) => {
  const { name, phone, validUntil, reason } = req.body;
  const { userId } = req.user;
  let photoUrl = null;

  if (req.file) {
    // Construct URL path, replacing backslashes with forward slashes for web compatibility
    photoUrl = `uploads/${req.file.filename}`;
  }


  // Basic validation
  if (!name || !validUntil) {
    return res.status(400).json({ message: 'Veuillez fournir le nom et la date de validité.' });
  }

  try {
    // Find the user to get their buildingId
    const user = await User.findById(userId);
    if (!user || !user.buildingId) {
      return res.status(404).json({ message: 'Utilisateur ou bâtiment non trouvé.' });
    }

    const newVisitor = new Visitor({
      name,
      phone,
      validUntil,
      reason,
      photoUrl,
      createdBy: userId,
      buildingId: user.buildingId,
      // groupId and accessId will be generated by default
    });

    await newVisitor.save();

    res.status(201).json({
      message: 'Visiteur créé avec succès.',
      visitor: {
        id: newVisitor._id,
        name: newVisitor.name,
        accessId: newVisitor.accessId, // This is the ID for the QR code
        validUntil: newVisitor.validUntil,
      }
    });

  } catch (error) {
    console.error("Erreur lors de la création du visiteur:", error);
    res.status(500).json({ message: 'Erreur du serveur.' });
  }
});

// @route   GET api/visitors
// @desc    Get all visitors for the current user
// @access  Private
router.get('/', authenticateToken, async (req, res) => {
  const { userId } = req.user;

  try {
    const visitors = await Visitor.find({ createdBy: userId }).sort({ createdAt: -1 });
    res.json(visitors);
  } catch (error) {
    console.error("Erreur lors de la récupération des visiteurs:", error);
    res.status(500).json({ message: 'Erreur du serveur.' });
  }
});

// @route   GET api/visitors/:id
// @desc    Get a single visitor by accessId
// @access  Private
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const visitor = await Visitor.findOne({ accessId: req.params.id, createdBy: req.user.userId });
    if (!visitor) {
      return res.status(404).json({ message: 'Visiteur non trouvé.' });
    }
    res.json(visitor);
  } catch (error) {
    console.error("Erreur lors de la récupération du visiteur:", error);
    res.status(500).json({ message: 'Erreur du serveur.' });
  }
});

module.exports = router;
